{"failedCount":1,"prefixedPath":"apptest\/android.feature","packageQualifiedName":"apptest.android","loopIndex":-1,"relativePath":"apptest\/android.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":0,"errorMessage":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4","startTime":1742627263473,"endTime":1742627263473,"millis":0.0,"status":"failed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"configure driver = { type: 'android', webDriverPath: \"\/\", start: true, httpConfig: { readTimeout: 120000 } }"},"stepLog":"09:07:43.474 apptest\/android.feature:4\n* configure driver = { type: 'android', webDriverPath: \"\/\", start: true, httpConfig: { readTimeout: 120000 } }\n>> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\n"},{"result":{"nanos":0,"errorMessage":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7","startTime":1742627263474,"endTime":1742627263474,"millis":0.0,"status":"failed"},"step":{"line":7,"prefix":"*","index":0,"text":"print 'Desired Config:', android.desiredConfig"},"stepLog":"09:07:43.474 apptest\/android.feature:7\n* print 'Desired Config:', android.desiredConfig\n>> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\n"},{"result":{"nanos":0,"errorMessage":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8","startTime":1742627263474,"endTime":1742627263474,"millis":0.0,"status":"failed"},"step":{"line":8,"prefix":"Given","index":1,"text":"driver { webDriverSession: { capabilities: { alwaysMatch: \"#(android.desiredConfig.alwaysMatch)\", firstMatch: \"#(android.desiredConfig.firstMatch)\" } } }"},"stepLog":"09:07:43.475 apptest\/android.feature:8\nGiven driver { webDriverSession: { capabilities: { alwaysMatch: \"#(android.desiredConfig.alwaysMatch)\", firstMatch: \"#(android.desiredConfig.firstMatch)\" } } }\n>> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\n"},{"result":{"nanos":0,"errorMessage":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\napptest\/android.feature:9","startTime":1742627263475,"endTime":1742627263475,"millis":0.0,"status":"failed"},"step":{"line":9,"prefix":"*","index":2,"text":"delay(300000000)"},"stepLog":"09:07:43.475 apptest\/android.feature:9\n* delay(300000000)\n>> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\napptest\/android.feature:9\n"},{"result":{"nanos":0,"errorMessage":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\napptest\/android.feature:9\napptest\/android.feature:11","startTime":1742627263475,"endTime":1742627263475,"millis":0.0,"status":"failed"},"step":{"comments":["# Verify initial balance"],"line":11,"prefix":"*","index":3,"text":"match driver.text('\/\/android.widget.TextView[@resource-id=\"com.serheniuk.currencyconversion:id\/balance\"]') == '1001 EUR'"},"stepLog":"09:07:43.475 apptest\/android.feature:11\n* match driver.text('\/\/android.widget.TextView[@resource-id=\"com.serheniuk.currencyconversion:id\/balance\"]') == '1001 EUR'\n>> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\napptest\/android.feature:9\napptest\/android.feature:11\n"}],"line":6,"description":"","durationMillis":0.0,"failed":true,"error":">> apptest\/android.feature:6\n>> karate-config.js failed\n>> js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\njs failed:\n>>>>\n01: function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n<<<<\ncom.intuit.karate.KarateException: js failed:\n>>>>\n01: (function fn() {\n02:   var env = karate.env;  \/\/  <set this only when set for CI execution - karate parameter e=locale\n03:   karate.log('karate.env system property was:', env);\n04:   \n05:   if (!env) {\n06:     env = 'dev'; \/\/ a custom 'intelligent' default\n07:   }\n08:     \/\/Default defaults (dev environment + bg market)\n09:     var config = {baseURL: 'https:\/\/qa.remixshop.dev\/', market: 'bg'}; \n10:     function getResourcePath(resource) {\n11:       var File = Java.type('java.io.File');\n12:       var Paths = Java.type('java.nio.file.Paths');\n13:       var path = Paths.get('util', resource).toAbsolutePath().toString();\n14:       return path;\n15:     }\n16:     var extensionPath = getResourcePath('chrome-extension');\n17:     \n18: \n19:   \n20:     \/\/Website\n21:     if (env == 'dev') {\n22:       config.baseURL = 'https:\/\/qa.remixshop.dev\/'\n23: \n24:     \/\/ don't waste time waiting for a connection or if servers don't respond within 15 seconds\n25:     karate.configure('retry', { count: 6, interval: 3000 });\n26:     karate.configure('connectTimeout', 25000);\n27:     karate.configure('readTimeout', 20000);\n28: \n29:     \/\/OPTION 1: by default locally Chrome:\n30:     karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", '--disable-search-engine-choice-screen', '--disable-infobars','--no-first-run','--disable-notifications', '--disable-features=PasswordLeakDetection'], showDriverLog: false });\n31:     \/\/OPTION 1 PLUS headerProxy!!!\n32:     \/\/karate.configure('driver', { type: 'chrome', addOptions: [\"--remote-allow-origins=*\", \"--load-extension=\" + extensionPath], showDriverLog: false, });\n33:     \/\/OPTION 2: docker container with Chromium, on M mac (arm) runs\n34:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:chromium', showDriverLog: true  });\n35:     \/\/OPTION 3: docker container for Linux\/Windows\n36:     \/\/karate.configure('driverTarget', { docker: 'justinribeiro\/chrome-headless:stable', showDriverLog: false });\n37:     \/\/OPTION 4: Karate supported full featured container, with script video recording\n38:     \/\/karate.configure('driverTarget', { docker: 'karatelabs\/karate-chrome', showDriverLog: true })\n39:     \/\/OPTION 5: mozilla\n40:     \/\/karate.configure('driver', { type: 'geckodriver', executable: 'geckodriver.exe' });\n41:     \/\/OPTION 6: Chrome for testing:\n42:     \/\/karate.configure('driver', { type: 'chrome', executable: chromeExecutable, addOptions: [ \"--remote-allow-origins=*\", \"--disable-popup-blocking\", \"--disable-infobars\", \"--no-first-run\", \"--no-default-browser-check\", \"--start-maximized\", \"--disable-features=DefaultBrowserSettingEnabled\", \"--disable-component-update\", \"--disable-background-networking\", \"--safebrowsing-disable-auto-update\", \"--disable-sync\", \"--disable-background-extensions\", \"--disable-background-timer-throttling\", \"--disable-client-side-phishing-detection\", \"--disable-web-security\", \"--test-type\", \"--disable-gpu\", \"--allow-running-insecure-content\", \"--ignore-certificate-errors\", \"--disable-translate\", \"--disable-dev-shm-usage\", \"--disable-default-apps\", \"--disable-notifications\", \"--disable-logging\", \"--no-default-browser-check\", \"--disable-blink-features=AutomationControlled\", \"--remote-debugging-port=9222\" ], webDriverSession: { capabilities: { 'goog:chromeOptions': { prefs: { 'search_provider': { 'name': 'Google', 'keyword': 'google.com', 'search_url': 'https:\/\/www.google.com\/search?q={searchTerms}', 'favicon_url': 'https:\/\/www.google.com\/favicon.ico' }, 'intl.accept_languages': 'en-US', 'profile': { 'password_manager_enabled': false }, 'credentials_enable_service': false }, 'useAutomationExtension': false, 'excludeSwitches': ['enable-automation'] } } }, showDriverLog: true });\n43:     \/\/Configure the global afterScenario (where ping to Slack is performed on test failure)\n44: \n45:     var android = {};\n46:     android[\"desiredConfig\"] = {\n47:       alwaysMatch: {\n48:         \"appium:app\": \"\/Users\/lyubomirlyubenov\/Downloads\/app-release.apk\",\n49:         \"appium:newCommandTimeout\": 300,\n50:         \"appium:platformVersion\": \"14.0\",\n51:         \"appium:platformName\": \"Android\",\n52:         \"appium:connectHardwareKeyboard\": true,\n53:         \"appium:deviceName\": \"emulator-5554\",\n54:         \"appium:avd\": \"Pixel_6a_API_34\",\n55:         \"appium:automationName\": \"UiAutomator2\"\n56:       },\n57:       firstMatch: [{}]\n58:     };\n59:     config[\"android\"] = android;\n60:     return config;\n61:   }    \n62: )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:62:0 Expected ; but found )\n)\n^\nUnnamed:62:1 Expected } but found eof\n)\n ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:428)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1252)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1254)\n- com.intuit.karate.core.ScenarioRuntime.evalConfigJs(ScenarioRuntime.java:296)\n- com.intuit.karate.core.ScenarioRuntime.beforeRun(ScenarioRuntime.java:371)\n- com.intuit.karate.core.ScenarioRuntime.run(ScenarioRuntime.java:390)\n- com.intuit.karate.core.FeatureRuntime.processScenario(FeatureRuntime.java:193)\n- java.base\/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\napptest\/android.feature:4\napptest\/android.feature:7\napptest\/android.feature:8\napptest\/android.feature:9\napptest\/android.feature:11","executorName":"main","name":"android mobile app UI tests","startTime":1742627263442,"refId":"[1:6]","endTime":1742627263475,"exampleIndex":-1}],"callDepth":0,"name":"android test","description":"","resultDate":"2025-03-22 09:07:43 AM","durationMillis":0.0,"passedCount":0}